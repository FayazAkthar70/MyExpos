alias functionNum R1;
alias currentPID R2;


if (functionNum == 1) then	//disk store
	alias pageno R3;
	alias blockno R4;

	//call acquire disk func
	backup;
	R1 = 3;
	R2 = currentPID;
	call MOD_0;
	restore;

	//update disk status table
	[DISK_STATUS_TABLE] = 1;	//status
	[DISK_STATUS_TABLE + 1] = 1;	//load/store bit
	[DISK_STATUS_TABLE + 2] = pageno;
	[DISK_STATUS_TABLE + 3] = blockno;
	[DISK_STATUS_TABLE + 4] = currentPID;


	store(pageno,blockno);

	[PROCESS_TABLE + 16*currentPID + 4] = WAIT_DISK;

	backup;
	call MOD_5;
	restore;

	return;
endif;

if (functionNum == 2) then			//Disk Load			
	alias PageNum R3;
	alias BlockNum R4;
	multipush(R1,R2,R3,R4);
	R1 = 3;
	call MOD_0;							//acquire
	multipop(R1,R2,R3,R4);
	[DISK_STATUS_TABLE+1] = 0;			//load
	load(PageNum,BlockNum);
	[PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_DISK;
	call MOD_5;
	return;
endif;
if (functionNum == 3) then			//Write
	multipush(R1,R2);
	functionNum = 8;
	currentPID = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1,R2);
	alias word R3;
	print word;
	multipush(R1,R2,R3);
	functionNum = 9;
	call MOD_0;
	//save R0 if required
	multipop(R1,R2,R3);
	return;
endif;
if (functionNum == 4) then				//Read
	multipush(R1,R2,R3);
	R1 = 8;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1,R2,R3);
	read;
	[PROCESS_TABLE + currentPID * 16 + 4] = WAIT_TERMINAL;
	multipush(R1,R2,R3);
	call MOD_5;
	multipop(R1,R2,R3);
	alias logicaladd R3;
	alias offset R4;
	alias lpage R5;
	offset = logicaladd % 512;
	lpage = logicaladd / 512;
	[([PTBR + 2*lpage])*512 + offset] = [PROCESS_TABLE + currentPID * 16 + 8];
	return;
endif;
return;